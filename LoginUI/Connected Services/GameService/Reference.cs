//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoginUI.GameService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerCredentials", Namespace="http://schemas.datacontract.org/2004/07/TurnbasedGameService")]
    [System.SerializableAttribute()]
    public partial class PlayerCredentials : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerNicknameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerNickname {
            get {
                return this.PlayerNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNicknameField, value) != true)) {
                    this.PlayerNicknameField = value;
                    this.RaisePropertyChanged("PlayerNickname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisterPlayerResponse", Namespace="http://schemas.datacontract.org/2004/07/TurnbasedGameService")]
    [System.SerializableAttribute()]
    public partial class RegisterPlayerResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PlayerIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PlayerID {
            get {
                return this.PlayerIDField;
            }
            set {
                if ((this.PlayerIDField.Equals(value) != true)) {
                    this.PlayerIDField = value;
                    this.RaisePropertyChanged("PlayerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IGameService")]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RegisterPlayer", ReplyAction="http://tempuri.org/IGameService/RegisterPlayerResponse")]
        LoginUI.GameService.RegisterPlayerResponse RegisterPlayer(LoginUI.GameService.PlayerCredentials request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RegisterPlayer", ReplyAction="http://tempuri.org/IGameService/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<LoginUI.GameService.RegisterPlayerResponse> RegisterPlayerAsync(LoginUI.GameService.PlayerCredentials request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UsernameAvailable", ReplyAction="http://tempuri.org/IGameService/UsernameAvailableResponse")]
        bool UsernameAvailable(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UsernameAvailable", ReplyAction="http://tempuri.org/IGameService/UsernameAvailableResponse")]
        System.Threading.Tasks.Task<bool> UsernameAvailableAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/AuthenticateUser", ReplyAction="http://tempuri.org/IGameService/AuthenticateUserResponse")]
        System.Nullable<System.Guid> AuthenticateUser(LoginUI.GameService.PlayerCredentials request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/AuthenticateUser", ReplyAction="http://tempuri.org/IGameService/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> AuthenticateUserAsync(LoginUI.GameService.PlayerCredentials request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : LoginUI.GameService.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.ClientBase<LoginUI.GameService.IGameService>, LoginUI.GameService.IGameService {
        
        public GameServiceClient() {
        }
        
        public GameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LoginUI.GameService.RegisterPlayerResponse RegisterPlayer(LoginUI.GameService.PlayerCredentials request) {
            return base.Channel.RegisterPlayer(request);
        }
        
        public System.Threading.Tasks.Task<LoginUI.GameService.RegisterPlayerResponse> RegisterPlayerAsync(LoginUI.GameService.PlayerCredentials request) {
            return base.Channel.RegisterPlayerAsync(request);
        }
        
        public bool UsernameAvailable(string username) {
            return base.Channel.UsernameAvailable(username);
        }
        
        public System.Threading.Tasks.Task<bool> UsernameAvailableAsync(string username) {
            return base.Channel.UsernameAvailableAsync(username);
        }
        
        public System.Nullable<System.Guid> AuthenticateUser(LoginUI.GameService.PlayerCredentials request) {
            return base.Channel.AuthenticateUser(request);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> AuthenticateUserAsync(LoginUI.GameService.PlayerCredentials request) {
            return base.Channel.AuthenticateUserAsync(request);
        }
    }
}
